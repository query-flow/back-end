# ========================================
# 🔐 JWT Authentication
# ========================================
# Sistema de autenticação baseado em tokens JWT
# Gere uma chave ÚNICA para cada ambiente!
#
# Comando para gerar:
#   python3 -c "import secrets; print(secrets.token_hex(32))"
JWT_SECRET_KEY=<gere-com-comando-acima>

# ========================================
# 🔑 Criptografia de Dados
# ========================================
# Chave para criptografar senhas de conexão das orgs
# Gere com:
#   python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
FERNET_KEY=<gere-com-comando-acima>

# ========================================
# 🗄️ Banco de Dados (Configuração da Plataforma)
# ========================================
# URL de conexão ao banco 'empresas' que armazena:
# - Usuários Platform Admin (role='admin')
# - Organizações
# - Documentos e schemas
# - Membros de cada org
#
# IMPORTANTE: O banco será criado AUTOMATICAMENTE quando você inicia a app!
# Ele lê os modelos Python em app/models/database_models.py e cria as tabelas.
#
# Formatos suportados:
#   MySQL:     mysql+pymysql://user:password@host:port/database?charset=utf8mb4
#   PostgreSQL: postgresql://user:password@host:port/database
#
# Para desenvolvimento local com Docker MySQL:
#   mysql+pymysql://root:insper@127.0.0.1:3306/empresas?charset=utf8mb4
CONFIG_DB_URL=mysql+pymysql://<user>:<password>@<host>:<port>/empresas?charset=utf8mb4

# ========================================
# 🤖 LLM (Azure OpenAI)
# ========================================
# Configuração para o Pipeline LLM
# Funcionalidades:
# - Gerar SQL a partir de perguntas em linguagem natural
# - Gerar insights e análises BI
# - Gerar gráficos automáticos
#
# Obtenha esses valores no Azure Portal > OpenAI
AZURE_OPENAI_ENDPOINT=https://<seu-recurso>.openai.azure.com
AZURE_OPENAI_API_KEY=<sua-api-key-aqui>
AZURE_OPENAI_DEPLOYMENT=gpt-4o_TechSolucoes
AZURE_OPENAI_API_VERSION=2025-01-01-preview

# Desabilitar LLM para testes sem custos
# 0 = usar LLM (padrão)
# 1 = desabilitar (apenas para desenvolvimento)
DISABLE_AZURE_LLM=0

# ========================================
# 📋 SETUP INICIAL - Passo a Passo
# ========================================
#
# 1️⃣ Gerar chaves (execute os comandos acima):
#    python3 -c "import secrets; print(secrets.token_hex(32))"
#    python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
#
# 2️⃣ Criar arquivo .env nesta pasta:
#    cp .env.example .env
#    nano .env  (editar com valores reais)
#
# 3️⃣ Criar banco de dados MySQL:
#    mysql -u root -p -e "CREATE DATABASE empresas CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci"
#
# 4️⃣ Instalar dependências Python:
#    python3 -m venv .venv
#    source .venv/bin/activate  (ou .venv\Scripts\activate no Windows)
#    pip install -r requirements.txt
#
# 5️⃣ Iniciar a aplicação (o banco é criado automaticamente!):
#    uvicorn app.main:app --reload
#
#    ✅ Ao iniciar, a função init_db() em app/main.py vai:
#       - Conectar ao banco de dados
#       - Ler os modelos Python (app/models/database_models.py)
#       - CRIAR AUTOMATICAMENTE todas as tabelas
#
# 6️⃣ (OPCIONAL) Se você estiver migrando de uma versão antiga:
#    python run_migration.py
#    (Adiciona colunas JWT aos bancos existentes)
#
# 7️⃣ Criar primeiro usuário Platform Admin:
#    python create_platform_admin.py
#
# 8️⃣ Testar a pipeline LLM:
#    python test_llm_pipeline_complete.py

# ========================================
# 🌍 AMBIENTES
# ========================================
#
# DESENVOLVIMENTO:
#   - Use banco local (127.0.0.1)
#   - JWT_SECRET_KEY pode ser conhecida
#   - DISABLE_AZURE_LLM=0 ou 1 (conforme queira testar)
#   - Sem HTTPS (http://localhost:8000)
#
# STAGING:
#   - Use banco staging dedicado
#   - JWT_SECRET_KEY DIFERENTE do desenvolvimento
#   - DISABLE_AZURE_LLM=0 (testar com LLM real)
#   - Teste a pipeline completa
#
# PRODUÇÃO:
#   - Use banco de produção com backups!
#   - JWT_SECRET_KEY SUPER SECRETO (nunca no Git!)
#   - DISABLE_AZURE_LLM=0 (usar LLM real)
#   - Com HTTPS (https://seu-dominio.com)
#   - Monitoramento e alertas ativados
#
# IMPORTANTE: Cada ambiente deve ter um .env DIFERENTE!

# ========================================
# 📚 ARQUITETURA DO BANCO DE DADOS
# ========================================
#
# Tabelas criadas automaticamente (veja app/models/database_models.py):
#
# users
#   ├── id (UUID)
#   ├── email (login Platform Admin)
#   ├── role: 'admin' (Platform Admin) | 'user' (regular)
#   ├── password_hash (bcrypt, para JWT)
#   ├── status: 'active' | 'inactive' | 'invited'
#   ├── invite_token (para convites)
#   └── ... (mais campos)
#
# orgs
#   ├── id (UUID)
#   ├── name (nome da organização)
#   └── ... (informações da org)
#
# org_members (link users ↔ orgs)
#   ├── user_id → users.id
#   ├── org_id → orgs.id
#   └── role_in_org: 'org_admin' | 'member'
#
# org_db_connections (credenciais da org)
#   ├── org_id → orgs.id
#   ├── driver, host, port, database_name
#   └── password_enc (criptografado com FERNET_KEY)
#
# org_allowed_schemas (schemas que org pode acessar)
#   ├── org_id → orgs.id
#   └── schema_name
#
# biz_documents (documentação das orgs)
#   ├── id
#   ├── org_id → orgs.id
#   ├── title
#   └── metadata_json
#
# query_audit (log de consultas)
#   ├── id
#   ├── org_id
#   ├── sql_text
#   └── duration_ms

# ========================================
# 🔐 SISTEMA DE AUTENTICAÇÃO
# ========================================
#
# 2 TIPOS DE USUÁRIOS:
#
# 1. Platform Admin (users.role = 'admin')
#    - Faz login em /auth/admin-login
#    - Token JWT válido por 24h
#    - Acesso a /admin/* endpoints
#    - Pode criar/gerenciar organizações
#    - Pode criar/gerenciar usuários
#
# 2. Org Member/Admin (org_members.role_in_org = 'org_admin'/'member')
#    - Faz login em /auth/login
#    - Token JWT válido por 24h
#    - Acesso apenas à sua organização
#    - Pode convidar novos membros (se org_admin)
#    - Pode fazer consultas NL→SQL (se org_admin ou member)

# ========================================
# 🚀 COMO A APP FUNCIONA
# ========================================
#
# Quando você executa: uvicorn app.main:app --reload
#
# 1️⃣ FastAPI inicia em http://localhost:8000
#
# 2️⃣ Função startup() é chamada (app/main.py:20-40)
#    - init_db() conecta ao banco
#    - Lê Base.metadata (todos os modelos)
#    - Executa CREATE TABLE IF NOT EXISTS para cada modelo
#    - ✅ BANCO CRIADO AUTOMATICAMENTE!
#
# 3️⃣ Aplicação fica pronta para requisições
#    GET  /              → Health check
#    GET  /docs          → Swagger UI (testes)
#    POST /auth/admin-login → Login Platform Admin
#    POST /auth/login       → Login Org Member
#    POST /admin/orgs       → Criar organização
#    POST /admin/orgs/{id}/members → Convidar membro
#    POST /perguntar_org    → Fazer pergunta NL→SQL
#
# 4️⃣ Primeiras requisições
#    - Crie um Platform Admin: python create_platform_admin.py
#    - Faça login: POST /auth/admin-login
#    - Crie uma org: POST /admin/orgs
#    - Teste a LLM: python test_llm_pipeline_complete.py

# ========================================
# ⚠️ TROUBLESHOOTING
# ========================================
#
# "ConnectionRefusedError" ao iniciar:
#   → MySQL não está rodando
#   → Verifique: docker ps | grep mysql
#   → Inicie: docker-compose up -d (se tiver docker-compose.yml)
#
# "No module named 'mysql.connector'" ou similar:
#   → pip install -r requirements.txt
#   → pip install pymysql (driver MySQL específico)
#
# "Token inválido ou expirado":
#   → JWT_SECRET_KEY foi alterada
#   → Todos os tokens antigos ficam inválidos
#   → Faça login novamente
#
# "Sem acesso a esta organização":
#   → User não está linkado à org (org_members)
#   → Administrador deve adicionar membro: POST /admin/orgs/{id}/members
#
# LLM retorna erro:
#   → Verificar AZURE_OPENAI_ENDPOINT, API_KEY, DEPLOYMENT
#   → Testar conexão: curl https://seu-endpoint/health
#   → Se quiser desabilitar: DISABLE_AZURE_LLM=1

# ========================================
# 📚 REFERÊNCIAS
# ========================================
#
# Documentação do projeto:
#   - README.md         → Overview
#   - DEPLOY.md         → Como fazer deploy em produção
#   - GUIA_JWT_AUTH.md  → Explicação do sistema JWT
#   - ANALISE_LLM.md    → Arquitetura da Pipeline LLM
#
# Links úteis:
#   - FastAPI: https://fastapi.tiangolo.com/
#   - SQLAlchemy: https://docs.sqlalchemy.org/
#   - JWT: https://jwt.io/
#   - Azure OpenAI: https://learn.microsoft.com/pt-br/azure/ai-services/openai/
